#!/bin/bash
#
#    Authors: Scott Moser <smoser@canonical.com>
#             Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

source "${0%/*}/common-functions.sh"

burl="https://launchpad.net/ubuntu/+archive/primary/+files/"
outdir="./download"
def_arches="i386 x86_64 arm powerpc ppc64 ppc64le aarch64"

case "$1" in
    --outdir=*) outdir="${1#*=}"; shift;;
    --outdir) outdir="$2"; shift 2;;
esac

debs2tar() {
    local out="$1" t="" deb=""
    shift
    t=$(dirname "$out")
    tdir=$(mktemp -d "$t/.${0##*/}.XXXXXX") || return
    debug 1 "creating $out in tempdir at $tdir from $*"
    mkdir "$tdir/ex"
    for deb in "$@"; do
        debug 2 "extracting $deb"
        dpkg -x "$deb" "$tdir/ex" || {
            error "failed dpkg -x $deb";
            rm -Rf "$tdir";
            return 1;
        }
    done
    debug 2 "creating kernel.tar.gz"
    tar -C "$tdir/ex" -czf "$tdir/kernel.tar.gz" . &&
        mv "$tdir/kernel.tar.gz" "$out" || {
            error "failed creating tarball from $*";
            rm -Rf "$tdir"
            return 1;
        }
    rm -Rf "$tdir";
    return 0
}

kver="$1"
shift

if [ $# -eq 0 ]; then
   set -- ${def_arches}
fi

[ -d "$outdir" ] || mkdir -p "$outdir" ||
   fail "failed mkdir $outdir"


[ -n "$kver" ] || fail "must give kernel version"

# version like 3.13.0-52.86
#              3.19.0-20.20~14.04.1

fmt_old() {
    # this worked for kernels 3.2 -> 4.4
    local xarch="$1"
    image="linux-image"
    extras=""
    case "$xarch" in
        amd64|i386|ppc64el|s390x)
            extras="linux-image-extra";;
    esac
}

fmt_4_4_new() {
    # this is 4.15 format but with 4.4 arch availability.
    # was in place for 4.4 kernels >= abi 148.
    local xarch="$1"
    case "$xarch" in
        amd64|i386|ppc64el|s390x)
            extras="linux-modules linux-modules-extra";;
        arm64|armhf|powerpc)
            extras="linux-modules";;
    esac
    [ "$xarch" = "amd64" ] &&
        image="linux-image-unsigned" || image="linux-image"
}

fmt_4_15() {
    # this format, with
    #   images linux-image and linux-image-unsigned)
    #   modules linux-modules and linux-modules-extra
    # was in place for 4.15.
    local xarch="$1"
    image="linux-image"
    extras="linux-modules linux-modules-extra"
    case "$xarch" in
        # no big endian kernel or 4.15
        amd64|ppc64el) image="linux-image-unsigned";;
        arm64|i386|s390x) :;;
        powerpc) image=""; extras="";;
        armhf) extras="linux-modules";;
    esac
}

kpart=${kver%-*}
upart=${kver#*-}
abi=${upart%%.*}
kmajor=${kpart%%.*}
kminor=${kpart#*.}; kminor=${kminor%.*}
kmicro=${kpart#*.*.}

case "$kmajor.$kminor" in
   3.2|3.13|3.19|4.4) :;;
   4.15|5.3) error "WARN: $kmajor.$kminor does not have a powerpc/ppc64-big-endian kernel.";;
   5.15) error "WARN: $kmajor.$kminor does not have a i386/powerpc/ppc64-big-endian kernel.";;
   *) error "WARN: possibly unknown kernel version $kmajor.$kminor.";;
esac

for arch in "$@"; do
    xarch=$arch;
    [ "$arch" = "x86_64" ] && xarch="amd64";
    if [ "$kmajor.$kminor" = "3.2" ]; then
        case "$arch" in
            x86_64|i386) flav="virtual";;
            arm) flav="omap"; xarch="armel";;
            powerpc) flav="powerpc64-smp";;
            *) fail "unknown kernel:arch for $kver:$arch"
        esac
    else
        case "$arch" in
            arm) xarch="armhf"; flav="generic";;
            aarch64) xarch=arm64; flav="generic";;
            powerpc|ppc64) xarch=powerpc; flav="powerpc64-smp";;
            ppc64le) xarch="ppc64el"; flav="generic";;
            x86_64|i386|arm64) flav="generic";;
            *) fail "unknown kernel:arch for $kver:$arch"
        esac
    fi
    image=""
    extras=""
    ffunc="fmt_4_15"
    case "$kmajor.$kminor" in
        3.*) ffunc="fmt_old";;
        4.4) [ "$abi" -ge 148 ] && ffunc="fmt_4_4_new" || ffunc=fmt_old;;
    esac
    $ffunc "$xarch"
    [ -z "$image" -a -z "$extras" ] && {
            echo "WARN: no image/extras for $xarch and $kmajor.$kminor"
            continue
    }
    debs=""
    for epkg in $image $extras; do
        debname="${epkg}-${kmajor}.${kminor}.${kmicro}-${abi}-${flav}_${kver}_${xarch}.deb"
        url="$burl$debname"
        dl "$url" "$outdir/$debname" || fail "failed dl $url"
        ln -sf "$debname" "$outdir/kernel-${arch}-${epkg}.deb" ||
            fail "failed symlink for $outdir/kernel-$arch-${epkg}.deb"
        debs="${debs} ${outdir}/$debname"
    done
    tar="linux-image-${kver}-${flav}-${xarch}.tar.gz"
    if [ -f "$outdir/${tar}" ]; then
        error "re-used existing $outdir/${tar}"
    else
        debs2tar "$outdir/${tar}" ${debs} ||
            fail "failed debs2tar to $tar on $debs"
        error "wrote $outdir/${tar}"
    fi
    ln -sf "${tar}" "$outdir/kernel-${arch}.tar.gz" ||
        fail "failed symlink for $outdir/kernel-$arch.tar.gz"
done

# vi: tabstop=4 expandtab
